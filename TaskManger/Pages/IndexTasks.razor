@page "/"

@using Radzen
@using Radzen.Blazor

@using TaskManger.Models

@if(Loading)
{
    <p>Cargando ...</p>
}
else
{    
    <Div Class="d-flex justify-content-between">
        <h1 class="page-header">Metas</h1>

        <Breadcrumb class="ml-auto">
            <BreadcrumbItem>
                <BreadcrumbLink>
                    <Icon Name="IconName.Home"></Icon>
                </BreadcrumbLink>
            </BreadcrumbItem>

            <BreadcrumbItem Active>
                <BreadcrumbLink>Metas</BreadcrumbLink>
            </BreadcrumbItem>
        </Breadcrumb>
    </Div>

    <Row>
        <Column ColumnSize="ColumnSize.Is4.OnFullHD.Is4.OnDesktop.Is4.OnTablet.Is12.OnMobile">
            <RadzenCard class="bg-white">
                <Button Size="Size.Small" Color="Color.Primary" Clicked="@AddGoalModal" Class="mb-2">
                    <Icon Name="IconName.Add"  />
                    <Strong>NUEVA</Strong>
                </Button>

                <RadzenDataGrid TItem="GoalModel"
                    AllowFiltering="true" 
                    AllowColumnResize="true" 
                    AllowAlternatingRows="false" 
                    FilterMode="FilterMode.Advanced" 
                    AllowSorting="true" 
                    PageSize="10" 
                    AllowPaging="true" 
                    PagerHorizontalAlign="HorizontalAlign.Left" 
                    ShowPagingSummary="true"
                    Data="@GoalsList"                 
                    LogicalFilterOperator="LogicalFilterOperator.Or" 
                    SelectionMode="Radzen.DataGridSelectionMode.Single" 
                    @bind-Value=@selectedGoals>

                    <Columns>
                        <RadzenDataGridColumn TItem="GoalModel" Property="@nameof(GoalModel.Name)" Title="Meta" Frozen="true" >
                            <Template Context="data">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <Small><Strong>@data.Name</Strong></Small> <br />
                                        <Small>Fecha Creada: @data.CreatedDate.ToShortDateString()</Small>                                        
                                    </div>
                                    <div >
                                        <Tooltip Text="Editar" Placement="TooltipPlacement.Bottom">
                                            <Button Background="Background.Transparent" Size="Size.ExtraSmall" Clicked="() => UpdateGoalModal(data)">
                                                <Icon Name="IconName.Edit" />
                                            </Button>
                                        </Tooltip>

                                        <Tooltip Text="Eliminar" Placement="TooltipPlacement.Bottom">
                                            <Button Background="Background.Transparent" Size="Size.ExtraSmall" Clicked="() => DeleteGoalModal(data)">
                                                <Icon Name="IconName.Delete" />
                                            </Button>
                                        </Tooltip>
                                    </div>
                                </div>

                                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="@data.ProgressValue" />
                            </Template>
                        </RadzenDataGridColumn>                                                            
                    </Columns>

                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No hay Metas</p>
                    </EmptyTemplate>
                </RadzenDataGrid>

            </RadzenCard>
            
        </Column>
        
        <Column ColumnSize="ColumnSize.Is8.OnFullHD.Is8.OnDesktop.Is8.OnTablet.Is12.OnMobile">
            <RadzenCard class="bg-white">
                                
                <Button Size="Size.Small" Color="Color.Success" Class="me-1 mb-2" Clicked="@AddTaaskModal">
                    <Icon Name="IconName.Add" />
                    <Strong>AREGAR TAREA</Strong>
                </Button>

                @if (selectedTaasks.Any())
                {
                    @if (selectedTaasks.FirstOrDefault().IsCompleted)
                    {
                        <Button Size="Size.Small" Color="Color.Light" Clicked="() => OnCompleteTask(false)" Class="mb-2 me-1">
                            <Icon Name="IconName.Times" />
                            <Strong>INCOMPLETA</Strong>
                        </Button>
                    }
                    else
                    {
                        <Button Size="Size.Small" Color="Color.Light" Clicked="() => OnCompleteTask(true)" Class="mb-2 me-1">
                            <Icon Name="IconName.Check" />
                            <Strong>COMPLETAR</Strong>
                        </Button>
                    }

                    <Button Size="Size.Small" Color="Color.Light" Clicked="@UpdateTaaskModal" Class="mb-2 me-1">
                        <Icon Name="IconName.Edit" />
                        <Strong>EDITAR</Strong>
                    </Button>

                    <Button Size="Size.Small" Color="Color.Light" Clicked="@DeleteTaaskModal" Class="mb-2 me-1">
                        <Icon Name="IconName.Delete" />
                        <Strong>ELIMINAR</Strong>
                    </Button>                    
                }

                <RadzenDataGrid TItem="TaaskModel" 
                    AllowFiltering="true"                    
                    AllowSorting="true" 
                    FilterMode="FilterMode.Advanced"                     
                    PageSize="10" 
                    AllowPaging="true" 
                    PagerHorizontalAlign="HorizontalAlign.Left" 
                    ShowPagingSummary="true"
                    Data="@(GoalsList.Count > 0 ? selectedGoals.FirstOrDefault().TasksList.Where(x => !x.IsDeleted).ToList() : new List<TaaskModel>())"
                    @bind-Value="selectedTaasks">

                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(TaaskModel.IsFavorite)" Sortable="false" Filterable="false" Width="10%">
                            <Template Context="data">
                                @if (data.IsFavorite)
                                {
                                    <RadzenToggleButton Click="() => OnMarkAsFavorite(data, false)" Icon="star" ToggleIcon="favorite" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Light" ToggleShade="Shade.Dark" Size="ButtonSize.ExtraSmall" />
                                }
                                else
                                {
                                    <RadzenToggleButton Click="() => OnMarkAsFavorite(data, true)" Icon="star" ToggleIcon="favorite" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Light" ToggleShade="Shade.Dark" Size="ButtonSize.ExtraSmall" />
                                }
                            </Template>
                        </RadzenDataGridColumn>                   
                        <RadzenDataGridColumn Property="@nameof(TaaskModel.Name)" Title="Tarea" Width="50%" />                   
                        <RadzenDataGridColumn Property="@nameof(TaaskModel.CreatedDate)" Title="Fecha" FormatString="{0:dd/MM/yyyy}" Width="20%" />                   
                        <RadzenDataGridColumn Property="@nameof(TaaskModel.IsCompleted)" Title="Estado" Width="20%">
                            <Template Context="data">
                                @if (data.IsCompleted)
                                {
                                    <RadzenBadge Shade="Shade.Light" BadgeStyle="BadgeStyle.Success" Text="Completada" />
                                }
                                else
                                {
                                    <RadzenBadge Shade="Shade.Light" BadgeStyle="BadgeStyle.Secondary" Text="Abierta" />
                                }
                            </Template>
                        </RadzenDataGridColumn>                                      
                    </Columns>

                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No hay Tareas</p>
                    </EmptyTemplate>
                </RadzenDataGrid>
            </RadzenCard>
        </Column>        
    </Row>


    @* MODAL FOR GOALS *@
    <Modal @ref="ModalGoalRef" Animated>
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>
                    <Icon  Name="IconName.Edit"/>
                    META
                </ModalTitle>
                <CloseButton />
            </ModalHeader>

            <ModalBody>
                <EditForm Model="GoalModelRef">
                    <Validations @ref="ValidationsRef" Model="GoalModelRef" Mode="ValidationMode.Manual" ValidateOnLoad="false">
                        <Field>
                            <Small>Nombre:</Small>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <TextEdit Size="Size.Small" @bind-Text="GoalModelRef.Name">
                                    <Feedback>
                                        <ValidationError>Campo Obligatorio!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </Field>
                    </Validations>
                </EditForm>
            </ModalBody>

            <ModalFooter>
                <Button Size="Size.Small" Color="Color.Primary" Clicked="@SaveGoal">
                    <Icon Name="IconName.Save"></Icon>
                    <Strong>GUARDAR</Strong>
                </Button>
                
                <Button Background="Background.Transparent" Clicked="() => ModalGoalRef.Hide()">                    
                    <Strong>CANCELAR</Strong>
                </Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    
    @* MODAL FOR TAAKS *@
    <Modal @ref="ModalTaaskRef" Animated>
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>
                    <Icon Name="IconName.Edit" />
                    TAREA
                </ModalTitle>
                <CloseButton />
            </ModalHeader>

            <ModalBody>
                <EditForm Model="TaaskModelRef">
                    <Validations @ref="ValidationsRef2" Model="TaaskModelRef" Mode="ValidationMode.Manual" ValidateOnLoad="false">
                        <Field>
                            <Small>Nombre:</Small>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <TextEdit Size="Size.Small" @bind-Text="TaaskModelRef.Name">
                                    <Feedback>
                                        <ValidationError>Campo Obligatorio!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </Field>
                    </Validations>
                </EditForm>
            </ModalBody>

            <ModalFooter>
                <Button Size="Size.Small" Color="Color.Primary" Clicked="SaveTaask">
                    <Icon Name="IconName.Save"></Icon>
                    <Strong>GUARDAR</Strong>
                </Button>

                <Button Background="Background.Transparent" Clicked="() => ModalTaaskRef.Hide()">
                    <Strong>CANCELAR</Strong>
                </Button>
            </ModalFooter>
        </ModalContent>
    </Modal>


    <TaskManger.Components.Shared.DeleteModal @ref="DeleteModalRef" DeleteRecord="() => OnDeleteGoal(GoalModelRef)" />
    <TaskManger.Components.Shared.DeleteModal @ref="DeleteModalRef2" DeleteRecord="@OnDeleteTaaskl" />    
}




